// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  profilePic  String?
  bio         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  sentMessages      Message[]        @relation("SentMessages")
  receivedMessages  Message[]        @relation("ReceivedMessages")
  notifications     Notification[]
}

model Post {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  
  // Relations
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]

  @@index([authorId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  authorId  String
  
  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@index([postId])
  @@index([authorId])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId String?
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model FriendRequest {
  id           String         @id @default(uuid())
  status       FriendStatus   @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  senderId     String
  receiverId   String
  
  // Relations
  sender       User           @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User           @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model Message {
  id           String   @id @default(uuid())
  content      String
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())
  senderId     String
  receiverId   String
  
  // Relations
  sender       User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
}

model Notification {
  id        String             @id @default(uuid())
  type      NotificationType
  content   String
  isRead    Boolean            @default(false)
  createdAt DateTime           @default(now())
  userId    String
  
  // Relations
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  FRIEND_REQUEST
  POST_LIKE
  COMMENT_LIKE
  COMMENT
  MESSAGE
}
